Happy Nest Attendance
=====================

01.02.14

Got it working on the site. Nice feature: go to next week when wiping. 

Problem with the attendance SQL: if a kid had a session in the past, it won't show up as unassigned even if the leave date is changed. 
This happens if parents take their children out but then change their minds. This needs manual intervention at the moment and just updating
all session_registration and setting the valid_until date to null is not a good idea.

Idea: I could set the leave_date when updating sessions to none. That would keep the data tidier...

13.10.14

  Reboot. It is as it is.
  
  Access: localhost/hn/attendance.php for the attendance table.
  
  Next project: CRUD for parent and child. 
 
22.11.14
  
  I decide to use PDO for this. I see that PDO for MySQL is enabled in my PHP.INI already. Note that this may not be the case in production.
  
  PDO looks like a plain vanilla DAO implementation: there's a connection class, a statement class which appears to double as resultset.
  
  It is not a silver bullet: I still have to write the glue code between whatever objects I decide the app needs and the database columns
  the data is stored in. Always been that way, always will be, no?
  This is where I have a problem with PHP. I don't know enough about it to design a good data object. 
  What do I want? I don't want the data access code in the data object class. Even though it's not OO in a way, data objects should be light weight
  (really that's new-speak for they should be records). But it would be good if I could keep boilerplate code to a minimum. And really, all that the boilerplate
  code needs to know is which table the object is persisted to and which object attribute goes into which table column. Forgot something: it needs to know the 
  primary key of the table et voilà, I can write generic CRUD code. Or at least I can write the CUD part, anyway.
  One approach which would make this easier is to keep column names in the data object. The object hasn't got attributes as such, it stores its data in a hashmap style 
  structure, meaning it is accessible by column name. 
  
  What do I know. On closer inspection I find that PDO does provide a silver bullet, at least for reading: 
  I can use the PDO::FETCH_OBJ fetch style.

22.12.14

  I want a PDO spike. Connect to HN Database and display one object.
 
24.12.14

  Got that, turns out to be very easy (as you'd expect). I'm not sure what style to use though: whether it
  is better to go with the associative-array approach or the named properties. For querying the database
  I don't think it makes much difference, but for updating it's a different story. Or is it? The least I'd
  have to have is some info about the primary key of an object though. So you want an abstract class which 
  lets you retrieve that at the very least.
  
  Turns out that the boundary between an array and an object in PHP is fluid. You can cast objects to array
  and arrays to objects. As long as you stick to public properties everything is totally smooth.
  
  Traits: I can use those to provide default implementations of interfaces but not for polymorphism.
  
  This means it's easy to build insert and update statements from a data object.
  
  I'd quite like to have the ID column value returned after the insert. How do you do that? I guess that's
  driver specific, so find the MySQL equivalient for "returning <column> into :bindParm" and you're good.
  Turns out you don't even need that: PDO::lastInsertedId does what you want.   
  
  So CRUD should not be hard as long as we have a one-column PK. I have at least one table where this is
  not true though. Need to investigate how to handle that. 

26.12.14

  How would you do join fetching? I don't want to have to fetch children of parents one at a time.
  
  You cound not fetch objects directly from a PDOStatement. You'd also have to have a prefix for the
  column names of parent and child. 
  
  Google tells me that there's no support as such in PDO. I am not going to get into a "proper" ORM, that's total overkill for my application.
  
  AFAICS I'd have to build the select list myself using a prefix for each column (PDO::FETCH_ASSOC simply overwrites duplicate names).
  It would seem that it would be easiest to just build an associative array of HappyParents and then read all children and do a fixup
  on that data structure.
  That raises a performance issue though. I clearly do not want to do that on every access. I need a variable at application level.
  PHP has static variables, that ought to do it. 
  What about concurrency issues? Clearly since I intend to update this data structure I need synchronisation.
  
  After trawling the internet for a while I find that synchronising access to shared data structures is not really the PHP way. It is meant 
  to be share-nothing, meaning the theory is to interact directly with the database on every request.
  I guess what you would do is to have a structure like the HappyParentMap in memory, access it on read, invalidate it on write. That's a 
  write-through cache iirc. (Not quite: write-through means updating cache and backing store simultaneously as opposed to write-behind where
  you only update the cache, waiting for the backing store to be updated at a later time.)
 
 27.12.14
 
  This is going in the wrong direction. I'm not trying to write a super-scalable app here that scales across multiple servers. All I need is a simple
  CRUD web app. I do want the data in memory though. Let's investigate APC.
  That's not a good answer to the problem. There is no possibility to have separate caches for e.g. HappyParent and HappyChild, so I'd have to 
  compose keys to be able to retrieve specific objects. Maybe an in memory DB is a better answer. 
  
24.01.15
  
  An in-memory DB would mean I basically do every update twice. There has got to be a better cache than APC.
  There is another drawback: APC is not bundled with PHP, it is a PECL extension. I don't know how to get that onto the Happy Nest site if it isn't there
  already.
  How about just writing a table of Happy Parents which uses API which I can later refine?
  
25.01.15
  
  I got an simple list of parents out of the database. I could turn that into an HTML table etc etc. Before I do, I want to think about 
  how I can show different lists for parents with children in playgroup, those with children in English Club and those with children 
  in Happy Music.
  I can do it via session_registration, but I would need to enter the relevant data then. I don't have an easy way to do that for phonics
  and music at the moment. It might be easier to add the relevant booleans to the parent table and just maintain those for the time being.
  
  So far so good. Next step is to combine the child table into what I have along the lines mentioned above.
  
08.02.15
  
  Got that to work eventually, it even sorts correctly now. Minor details to be added in this iteration: mailto link would be nice, table 
  doesn't look great because empty cells aren't displayed with border. 
  
  Target of next iteration: details page with link. General Problem: how do you handle navigation? Actual problem: would be nice to have
  link from this page to assign_sessions page, but how do I go back to correct page?  
  
16.2.15
  
  Got the site to work. The problem was that the DB was out of sync. I gotta be more careful about how I update the DB locally. 
  I also need a way to keep my local stuff in sync with the site. Maybe BeyondCompare will be useful.
  
01.03.15
  
  There is a problem when I change registrations. What I attempted was to move Zofia (child ID 37) from Tue / Wed to Tue / Thu. I am not sure exactly what 
  I did and when I did it, but I ended up with the following entries in the DB 
    37  3   2014-12-15  2015-01-25
    37  4   2014-12-15  2014-12-14
    37  3   2014-08-18  2015-01-25
    37  2   2014-08-18  NULL
    37  4   2015-01-26  NULL
    37  4   2015-02-23  NULL
  I don't have the time right now, but this needs reproducing and debugging.
  
07.03.15
  
    37  3   2014-12-15  2015-01-25  session ID 3 is Wed
    37  4   2014-12-15  2014-12-14  4 = Thu
    37  3   2014-08-18  2015-01-25
    37  2   2014-08-18  NULL        2 = Tue
    37  4   2015-01-26  NULL
    37  4   2015-02-23  NULL
  
  My theory is that when the form was posted, it failed to recognise the session on Thu and added it again.
  
  Well one way this whole thing fails is if I go back in time and edit again. If the record starting 02-23 was inserted first, 
  then the system would not "know" about it and re-insert the session on 01-26.
  
  Could solve this problem by having not just "true" for the registered field in the session structure but the date when the registration starts.
  Also load future registrations. If registration starts in future, just update the record accordingly. Might need similar logic for stopping reg.
  
02.04.15
  
  Had a crack at inserting new parents. Need to rethink inheritance hierarchy. HappyParent cannot be an Entity, it needs to be a pojo. I need a
  separate class which takes a HappyParent and does Entity things to it.
  
04.04.15
  
  Inserting new parents works. I need to invest some time in the user interface. I want the parent table to scroll and I want menu / button 
  bars at the top and the bottom of the page.
  
26.04.15
  
  I want to find out how to move the database from the production site to my dev environment.
  That's easy enough: export the DB in production, options are straightforward. Then drop the database in dev, run the SQL created
  in the first step, voilà.
  
  I want to be able to enter all the data we collect on the reg form and have it in the DB. 
  People usually go on the waiting list first. I need to come up with a sequence of states which people go through before 
  they end up in the playgroup.
  How about "enquired, registered, placed" where placed means we promised them a place? Then when we finalise the placement the child
  gets a start date and that's when they have definitely left the waiting list.
  Question is whether the "placed" state is necessary. I think not.
  Would be cool if I could capture the days of the week people are interested in. 
  NB it's not the parents who are on the waiting list, it's the children. 
  Waiting list could be a session type. 
  
29.4.15
  
  I have a new DB design that works better with music, waiting list etc. I need to redo the attendance though.
  The methods I need for this don't fit well into HappyParentFactory - they concern sessions and children, not parents.
  Also don't see clearly what data structure is supposed to look like. The SQL query for this is easier or was with 
  the old structure. I have a notion to only have valid_from on the table in the new design and calculate valid_until 
  when I load the data but I'm not at all sure that's going to work. 
  Actually it should. I have to have a list of sessions for every child valid from, valid to etc, done and dusted.
  
30.4.
  
  It just occured to me that maybe I should go even further down the record road. As it is, I have a parent has a list of children, 
  but if you do that, then logically a child should have a reference to a parent and that's you in trouble: var_dump probably just stopped
  working because there is a circular reference in your object structure. But really, that's a problem of var_dump, should not stop me from 
  doing the object structure correctly.
  Yeah but no but yeah but no but...
  If I include the parent reference in the child object, my EntityAdapter just stopped working. 
  
1.5.15
  
  What I'm looking for is a sort of decorator for the objects which are transported between the app and the database. 
  I would like the decorator to be sort of transparent, meaning that the original properties of the transport object should
  not be obscured. If I had that, the parent decorator could add the child list, the child decorator would add the parent 
  reference, the valid_to property and the session list. I know this can be done in PHP.

  That does work. However, my general approach appears not to be proper PHP. Static variables do not keep their values between
  PHP requests, only the stuff in the Session does. That means I either pay the price for building my object structure every time,
  or I lose it, or I use something like APC to cache it. I have a hunch that APC is available on the production site - apparently Drupal
  makes heavy use of it and Drupal works. That's nice but I don't have it locally. That's not a reason not to use it though. 
  I don't need it though. I can lose the object structure in a caching sense and just get the objects that I actually need from the DB.
  If I see bad performance (unlikely) I can then add caching. Premature optimisation and all that.
  
 2.5.15
 
  So far so good. Problem I have now is how to edit the children part. I was almost certain that there is such a thing as a control
  array in HTML forms like there was in VB, but I can't find how to do it except by appending an index to the control name by hand.
  Also, adding children would need JavaScript I suppose, or shall we say it would be easiest if I used JS for this.      
 
 3.5.15
 
   how do I get the children into the happyParent object? The request has controls like child_nickname0, where 0 is 
   the child array index. I need to allow for the child array in the request to have more elements than the child 
   array, eventually that's the way I will be adding children.
   and what about sessions? 
   There will be radio buttons for waiting list, playgroup, english and music.
   Let's start with inserting one child and then take it from there. 
 
 9.5.15
 
  I can create and update parents and children. I can also insert session occurences. I'm not sure how to handle the valid_from 
  attribute in session occurences yet. I could have a GUI element showing it and if you leave that alone it's an update, if not
  then it's an insert. The problem with that is that session occurences do not have an id. Their primary key is really child_id, session_id
  and valid_from. My entity adapter cannot handle that. I could make it so it can handle it or I could give the session occurence table
  an artifical primary key. The purist in me doesn't like the artificial PK.
  I don't think it would be that difficult, either.
  Turns out that the update part was a figment of my imagination. I can read existing data but not write it, apparently.
  
 10.5.15
 
  Update works for the straightforward cases (HappyParent and HappyChild). SessionOccurence isn't done yet and there is a problem with it.
  I can use the IDs of HP and HC to decide whether to insert or update and have the DB generate the ID, but this obviously doesn't work
  for SessionOccurences. I cannot see a solution other than having a boolean on the decorated object (not the DTO).
  Updating a SessionOccurence _is_ a real use case. If there is a mistake with the week days, you want that changed, not have the correct data
  added with an artificial valid_from date. 
  My data structure doesn't work for multiple occurences of the same session for the same child.
 
 15.5.15
 
  Think I have it, except for resetting sessions for a child. GUI logic there could be to clear weekdays for a session if a valid_from date is 
  set.
  The logging is not very satisfying as it is. I rely on a class having a logger named logger in the traits, that is not good. I don't know
  how to do it better at the moment though.
  
  The reset works also, but requires a valid from date on the session that is being reset. This would make the use case where a child
  moves off the waiting list clumsier that it needs to be.
 
 16.5.15
 
  Had an idea: instead of having a separate assign sessions page, I could link to the edit parents page from the attendance page. I will need
  to deal with the asOf logic somehow though. I could set the valid_from text boxes accordingly, but then I need to change the logic for
  resetting sessions.
  Turns out that that is not enough. I must implement logic in the page which reacts on clicks on the session check boxes and sets the 
  valid from date.
  
  I also need to figure out how to keep track of the back link. One obvious way is in the session scope. That's probably my best bet. The only
  alternative I can think of is http_referrer, but according to PHP doc, that is unreliable.
  
  Found a potential problem: It seems that when I add a parent / child, the session insert doesn't work correctly. Investigate later. 

17.5.15

  Turns out all that that was is that in case of inserts I was not dealing with multiple sessions per child yet. Easy to fix.
  
  It's getting there. There is one gap I am aware of: at the moment, you need to assign days for a child on the waiting list. That's
  not ideal, it should not be necessary to do that. If a child is on the waiting list without days then it should show up in the 
  "unassigned" column in the attendance table.
 
 19.5.15
 
  I want to fine tune the look of the edit page a bit.
  
  I want to make it so the attendance table is ordered by session type first. This may entail changing my data structure to having separate
  arrays for each day of the week, so that I can sort them more easily.
  
  So I got there in the end, lost a bit of time because I was using uasort when I should've been using usort.
 
 20.5.15
 
  Next topics: adding siblings, calendar should not require a roundtrip to the server.
 
 21.5.15
 
  I thought I had a great idea for adding siblings: it turns out that if you append [] to a control name and if you have several controls
  of the same name in your form, PHP will give you an array with all the values in $_POST. In theory this is neat because it means that I can 
  have one <div> with all of the HappyChild controls and then I can just add another copy of that <div> without interfering with the 
  control names at all. However, because for submission for checkboxes is the single most braindead thing in computer science, it doesn't work.
  I have thought of a workaround: I can add an event handler to the checkboxes which builds the days in another control which I then use when 
  processing the request. It will need more work though, because I have to build the eventhandler and I have to redo the event processing.
  Alternatively, I can abandon the array idea at least for now and adjust the control names when I copy the <div> for children.
 
 24.5.15
  
  Went with the event handler in the check boxes. This is worth a commit I suppose.
  
  It's not very stylish at the moment, this will have to wait though. I found an article with lots of icon sets: http://www.creativebloq.com/web-design/free-icon-sets-10134829
  
  Next step is to handle siblings.
  Done it. 
  
  14.6.15
  
    Changed the calendar navigation to use angular.js. The next step down that route would be to implement a REST interface to parents
    and children in PHP, then use this interface to reimplement a section of the site with Angular. It will probably be easier to do this
    for the edit part rather than the attendance part. 
    There is a weakness in the implementation at the moment: if a child has sessions in the future but not at the time where you look at
    the site, they don't show up.
   
 19.7.15
 
    I built a REST service in PHP. At the moment it only does GET requests and I only have one sample entity I invented: bookmarkdates, which
    are dates you can jump to in the attendance table.
    I am not yet happy with the error handling though. The sample code I started out from appears to append diagnostics to the status code. My 
    experiments so far indicate that this is pointless, only the status code makes it out of the service. This doesn't happen on the client side, 
    even the response headers show nothing.
    I can return the exception, which I receive in the data parameter of the error callback. I don't know exactly what to do with that. I suppose
    I would have to put it somewhere in my model in angular and then show it, but it all seems to be roll your own.
    Maybe there is a better way to handle exceptions when you build a proper single page app with angular.
    Another approach would be to not provide diagnostics on the client side, but log exceptions on the server side. That would mean I'd have to 
    revisit my logging implementation.
    Speaking of which: the log to console in Javascript idea is nice but has pitfalls: it is impossible to log in a service that way. Let's
    investigate how I can write to a logfile from PHP.
    There is a file access API in PHP. It is low-level, looks similar to what I remember from C. 
    Well duh. There is an Apache log4php project, let's investigate that. This is exactly what I want. 
    It works very well. I do have to do a big-bang conversion, because I have used the name Logger for my Logger thing.
    I still have the problem of how to log from traits. As it is, I require a class to have a static logger variable if it 
    wants to use the EntityTrait (e.g.). That's not great.

 09.09.15
 
    I think the above bit about requiring each class to have a static logger variable is wrong. I can put the logger part into its own trait 
    and use that trait in classes. 
    It's not quite as I'd like it: if you have A extends B, both use the logger trait, then apparently the logger used is always the one from
    B, even in the methods of A. I don't quite understand why, but it makes a difference whether the log methods are protected or private. If
    they're private, the behavior is correct: in A the logger used is A, in B it's B.
    Next thing to try is trait composition: I'd expect it to work, and I'd expect the logger to be used to depend on the class.
    That seems to work, so next step now is to take this from dump.php and implement it in the rest of the code.

 10.09.15
    
    I forgot about the dump methods I had in the old logger stuff. I'm not sure what to do about them.
    I could add the relevant methods to the LoggerTrait. 
    IIRC I used different renderers in log4j at one point. The VarDumpRenderer I already have and appear to have configured doesn't work though. 
    Will have to read up on log4php config to see if I can get this to work. 
 
 13.09.15
 
    I obviously never tested logging objects. Turns out the default is good enough, I don't need any custom renderers at all. 
    I certainly don't need the VarDumpRenderer, because var_dump ends up in the page output, I don't want that.
    json encoding an object seems to took good at least for "small" objects - not sure how that would look for e.g. a HappyParent.
    
    The trait approach has a serious drawback: I can only have the logging methods once, so if trait A uses logging I can't use the trait
    and logging in a class which uses A. The conflict resolution methods would require me to know that A uses logging and to resolve conflicts
    for each logging method, which is bad. 
    
    I can have a logger variable in a trait but trying to initialise it is a compile error. That's why I have to have the getLogger and logging 
    methods in the trait.
    
    I don't see a way around that. If I use a trait which uses logging, I simply have to know that and not use logging again.
    
    And here's another one I hadn't considered: how do I log from static methods? I'd have to make the whole logging stuff static I guess.
    Don't see any way around that.
    
    I want to investigate an approach where the logger trait has the static variable and requires each user to set it by defining an abstract
    method.
    Don't see the improvement.  
    
  16.09.15
      
    This is the URL to locally smoketest the bookmarkDates service: http://localhost/HappyNest/hn/api/v1/bookmarkDates/
    There is huge potential for improvement here: I'd like to look into the unit testing / system testing stuff you get when getting
    started with Angular.
    
    Having problems with paths in PHP: I use paths relative to the root of the site (HappyNest\hn in the project) for includes etc. 
    This works as long as the script I execute lives in the there. For services, that's different. I could use PHP's include path
    to work around this, but that doesn't work for the log4php config, plus it means that there's a env setting required for the system to
    work, which I don't like. The best solution I have come up with to date is to chdir to the site root at the start of service implementations.
    
    Playing with the log4php config I note that there is also a logger hierarchy in log4php. I don't see how I could use that, since there is
    no natural structure in PHP classes like there is in Java.  
    
    Next aim of the game: make it so Heloise can use the parents list at least to see who's in English and who's in Music. I want to implement this
    in an Angluar app. The plan is to implement filters for English, Music, Playgroup etc.
    
    In Angular, I need to use a combination of ng-repeat and filter to accomplish this.
    But, before I get that far, I need to implement the service which provides the data. Well, technically, I could also start with mock data
    in Angular and then eventually implement the service which provides real data.
    
    I do want to implement the filtering in Angular. This will give me faster filter switching, at the cost of increased memory load
    on the client. This means no filtering requirement on the service.
    
    Here's a little research question: the above obviously makes little difference to my site (a couple of dozen parents at best). But
    what do you do when you have big data, where transmitting it takes significant time? Also, is there a way to do some of the loading in
    the background so that your site appears to load faster? Well technically the answer to that question is yes there must be, the really 
    interesting question is obviously how do you do that?
    
    Another note: the parent service is also where I will have to deal with CRUD for parents.
    
    parent service handler was very easy. Wonder what the result looks like: http://localhost/HappyNest/hn/api/v1/parents/ should work.
    it doesn't - my hunch is that the json encoding of my parent data structure fails. Could have something to do with the fact that the
    structure has loops, I refer back to the parent from the child. Maybe that's not such a great idea.

  23.09.15
  
    Trying to handle the encoding error, strangely I see 2 log entries for the exception. Need to investigate. Turns out is was a 
    misconfiguration of log4php: you don't want appender_refs further down the hierarchy.
    Got the exception to log also, turns out I have to add it to the pattern explicitly.
    
    I can solve the object graph cycle problem by using the JsonSerialize interface. I'm wondering whether to combine it with the 
    DecoratedObject interface / trait I already have. Doing that would be a lot less work, but it seems unclean. Not only that, it's plain
    wrong actually. E.g. on HappyParent, I do not want to just serialise the plain object, I do actually want to serialise the children
    array.
    
    I got a mystery: if I implement JsonSerialize on HappyChild, the serialisation of the object graph works, but I don't see any 
    of the HappyParent properties on the output (except ID, strangely). If I implement JsonSerialize on HappyParent, the serialisation fails.
    It's not easy to debug, I need a much smaller DB. 
    Dammit: If I only have 1 parent, it works. If I have 10, it doesn't. If I have 2, it does. That makes no sense.
    
  30.09.15
    
    Further investigation on the parent svc. Got it: malformed UTF8 characters. Ideally I would like to ensure that I get this data correctly
    from the DB. Setting the option correctly on connecting did the trick once I restarted everything (DB and Apache).
    
    So now I want to build an Angular app using this data. In the tutorial, a certain directory structure is used. Do I copy that into my php
    project or do I create a separate "clean" project? Not a project, no. These things need to be in the same git repo. Maybe not need to be
    but that's how I want it. Same level as HappyNest/hn then? Why not. But names, man, names! hn2 is the best I can do in the time I want to 
    spend on this.
    
    I find the markup in the code not very reliable. It sometimes show me errors (like "no module found" for the angular app) that are clearly
    wrong. I would like to look into the tools I'm using a bit more. Another topic for that: what is Mylyn exactly? 
    
    Predictably I have a problem with the request URL for the parent service. I cannot use a relative URL like I did for the bookmark dates
    in the attendance page, I'm in a different project. 
  
  21.10.15
  
    Turns out I did have a problem with the request but it wasn't what I thought it was, I screwed up the request. I still have the original
    problem and I haven't got a good solution for it. Apparently the way configuration is done in Angular is by using the Constant provider. 
    You'd like to have these settings in a separate file. How do you get this file into "the app"? Do you need to include it in HTML?
    Right, so next step: have a constant for the parent service location and use it. If possible, define in its own file, if it's not possible, 
    then I should know that that is so (as opposed to suspecting it).
    I got the constant to work but it seems clumsy. I have to define it in one step and then list it as a dependency. Simply using a JS variable 
    (or constant if JS has them) seems a lot easier.
    2nd step: #include equivalent. There isn't one as such. There are preprocessors and suchlike, but no native way.
    But maybe I can do something on the server side. Can I change a script in PHP? Not without messing with the web server config I can't. 
    For this project that's a no-go as far as I'm concerned, I don't think I could make the required settings in production. 
    The alternative would be to give my JS scripts a .php extension, which also goes against the grain.
    I guess I will have to include all script files in all HTML pages - given that I should end up with only 1 layout template which routes
    to views that's not so bad.
    
    So just dumping the data onto a page turns out to be very easy. Doing this, I notice that apparently the session data is not set properly
    in my service. The "session" property is always null, and I also thought I'd done the valid-from / valid-to calculation at a lower level 
    that the service.
    
    Another topic is using templates. There won't be many: one which shows the list, one which shows the details, possibly one which shows
    the attendance table.
    
    1st things 1st: it's not glamorous but I gotta get the data right. Turns out SessionOccurence needed to implement JsonSerialize the same
    way as HappyChild and HappyParent etc. The data looks good now. 
    
    Next step (before I do the template thing) is to get this stuff into a table. I have a familiar layout problem: I can nest children
    into separate tables but getting the columns to line up across the whole table is difficult. I can either use fixed widths or I have
    to flatten the table structure and use colspans, rowspan or empty cells. Neither solution appeals but that's just me being snobby.
  
  28.10.15
  
    Turns out that I almost had a page displaying the whole data structure last time, but for a typo in the final ng-repeat section. I looked
    for a way to make it so that this could not happen, but didn't. I found a blog entry about safe-guarding the Angular scope here:
    http://blog.jdriven.com/2012/11/using-ecmascript-5-strict-mode-to-keep-your-angularjs-scope-declaration-clean/
    but it doesn't do what I want either. I want it so that I find an error somewhere if I make the same mistake again.
    
    Next topic: filter the table.
    That's not as easy as I hoped. I am having trouble getting a predicate function defined correctly and called properly.